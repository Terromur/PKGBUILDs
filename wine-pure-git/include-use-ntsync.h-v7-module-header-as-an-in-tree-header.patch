From 73182d786628e0d074cb0a0b793e00ba5b83c306 Mon Sep 17 00:00:00 2001
From: Stelios Tsampas <loathingkernel@gmail.com>
Date: Mon, 23 Dec 2024 11:31:27 +0200
Subject: [PATCH] include: use ntsync.h v7 module header as an in-tree
 header

Signed-off-by: Vasiliy Stelmachenok <ventureo@cachyos.org>
---
 configure.ac           |  1 -
 dlls/ntdll/unix/sync.c |  4 +--
 include/Makefile.in    |  1 +
 include/ntsync.h       | 61 ++++++++++++++++++++++++++++++++++++++++++
 server/inproc_sync.c   |  4 +--
 5 files changed, 66 insertions(+), 5 deletions(-)
 create mode 100644 include/ntsync.h

diff --git a/configure.ac b/configure.ac
index 6841c085400..5b734040115 100644
--- a/configure.ac
+++ b/configure.ac
@@ -389,7 +389,6 @@ AC_CHECK_HEADERS(\
 	linux/input.h \
 	linux/ioctl.h \
 	linux/major.h \
-	linux/ntsync.h \
 	linux/param.h \
 	linux/seccomp.h \
 	linux/serial.h \
diff --git a/dlls/ntdll/unix/sync.c b/dlls/ntdll/unix/sync.c
index f515865661d..91ee399c8b8 100644
--- a/dlls/ntdll/unix/sync.c
+++ b/dlls/ntdll/unix/sync.c
@@ -61,8 +61,8 @@
 #ifdef HAVE_KQUEUE
 # include <sys/event.h>
 #endif
-#ifdef HAVE_LINUX_NTSYNC_H
-# include <linux/ntsync.h>
+#ifdef HAVE_LINUX_TYPES_H
+# include "ntsync.h"
 #endif
 
 #include "ntstatus.h"
diff --git a/include/Makefile.in b/include/Makefile.in
index e07969d6474..fee679cb863 100644
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -600,6 +600,7 @@ SOURCES = \
 	ntsecapi.h \
 	ntsecpkg.h \
 	ntstatus.h \
+	ntsync.h \
 	ntuser.h \
 	oaidl.idl \
 	objbase.h \
diff --git a/include/ntsync.h b/include/ntsync.h
new file mode 100644
index 00000000000..7d85cb82ca5
--- /dev/null
+++ b/include/ntsync.h
@@ -0,0 +1,61 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+/*
+ * Kernel support for NT synchronization primitive emulation
+ *
+ * Copyright (C) 2021-2022 Elizabeth Figura <zfigura@codeweavers.com>
+ */
+
+#ifndef __LINUX_NTSYNC_H
+#define __LINUX_NTSYNC_H
+
+#include <linux/types.h>
+
+struct ntsync_sem_args {
+	__u32 count;
+	__u32 max;
+};
+
+struct ntsync_mutex_args {
+	__u32 owner;
+	__u32 count;
+};
+
+struct ntsync_event_args {
+	__u32 manual;
+	__u32 signaled;
+};
+
+#define NTSYNC_WAIT_REALTIME	0x1
+
+struct ntsync_wait_args {
+	__u64 timeout;
+	__u64 objs;
+	__u32 count;
+	__u32 index;
+	__u32 flags;
+	__u32 owner;
+	__u32 alert;
+	__u32 pad;
+};
+
+#define NTSYNC_MAX_WAIT_COUNT 64
+
+#define NTSYNC_IOC_CREATE_SEM		_IOW ('N', 0x80, struct ntsync_sem_args)
+#define NTSYNC_IOC_WAIT_ANY		_IOWR('N', 0x82, struct ntsync_wait_args)
+#define NTSYNC_IOC_WAIT_ALL		_IOWR('N', 0x83, struct ntsync_wait_args)
+#define NTSYNC_IOC_CREATE_MUTEX		_IOW ('N', 0x84, struct ntsync_mutex_args)
+#define NTSYNC_IOC_CREATE_EVENT		_IOW ('N', 0x87, struct ntsync_event_args)
+
+#define NTSYNC_IOC_SEM_RELEASE		_IOWR('N', 0x81, __u32)
+#define NTSYNC_IOC_MUTEX_UNLOCK		_IOWR('N', 0x85, struct ntsync_mutex_args)
+#define NTSYNC_IOC_MUTEX_KILL		_IOW ('N', 0x86, __u32)
+#define NTSYNC_IOC_EVENT_SET		_IOR ('N', 0x88, __u32)
+#define NTSYNC_IOC_EVENT_RESET		_IOR ('N', 0x89, __u32)
+#define NTSYNC_IOC_EVENT_PULSE		_IOR ('N', 0x8a, __u32)
+#define NTSYNC_IOC_SEM_READ		_IOR ('N', 0x8b, struct ntsync_sem_args)
+#define NTSYNC_IOC_MUTEX_READ		_IOR ('N', 0x8c, struct ntsync_mutex_args)
+#define NTSYNC_IOC_EVENT_READ		_IOR ('N', 0x8d, struct ntsync_event_args)
+
+#define HAVE_LINUX_NTSYNC_H
+
+#endif
diff --git a/server/inproc_sync.c b/server/inproc_sync.c
index 57d6bce4116..f0597aad033 100644
--- a/server/inproc_sync.c
+++ b/server/inproc_sync.c
@@ -33,8 +33,8 @@
 #include "request.h"
 #include "thread.h"
 
-#ifdef HAVE_LINUX_NTSYNC_H
-# include <linux/ntsync.h>
+#ifdef HAVE_LINUX_TYPES_H
+# include "ntsync.h"
 #endif
 
 #ifdef NTSYNC_IOC_EVENT_READ
-- 
2.48.1

