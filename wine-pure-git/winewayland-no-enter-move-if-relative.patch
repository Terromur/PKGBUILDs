Stop sending a mouse move on surface enter if the last move was relative.
This reduces sudden movement jumps if a surface is in relative pointer mode and loses then regains focus.
Preventing them entirely would require some more rework..
diff --git a/dlls/winewayland.drv/wayland_pointer.c b/dlls/winewayland.drv/wayland_pointer.c
index c20ba17..3e7b831 100644
--- a/dlls/winewayland.drv/wayland_pointer.c
+++ b/dlls/winewayland.drv/wayland_pointer.c
@@ -46,7 +46,7 @@ static HWND wayland_pointer_get_focused_hwnd(void)
     return hwnd;
 }
 
-static void pointer_handle_motion_internal(wl_fixed_t sx, wl_fixed_t sy)
+static void pointer_handle_motion_internal(wl_fixed_t sx, wl_fixed_t sy, BOOL is_enter)
 {
     INPUT input = {0};
     RECT *window_rect;
@@ -57,7 +57,7 @@ static void pointer_handle_motion_internal(wl_fixed_t sx, wl_fixed_t sy)
 
     if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
     if (!(data = wayland_win_data_get(hwnd))) return;
-    if (!(surface = data->wayland_surface))
+    if (!(surface = data->wayland_surface) || (is_enter && data->last_mouse_move_was_relative))
     {
         wayland_win_data_release(data);
         return;
@@ -77,6 +77,7 @@ static void pointer_handle_motion_internal(wl_fixed_t sx, wl_fixed_t sy)
     else if (screen.x < window_rect->left) screen.x = window_rect->left;
     if (screen.y >= window_rect->bottom) screen.y = window_rect->bottom - 1;
     else if (screen.y < window_rect->top) screen.y = window_rect->top;
+    data->last_mouse_move_was_relative = FALSE;
 
     wayland_win_data_release(data);
 
@@ -100,7 +101,7 @@ static void pointer_handle_motion(void *data, struct wl_pointer *wl_pointer,
     /* Ignore absolute motion events if in relative mode. */
     if (pointer->zwp_relative_pointer_v1) return;
 
-    pointer_handle_motion_internal(sx, sy);
+    pointer_handle_motion_internal(sx, sy, FALSE);
 }
 
 static void wayland_set_cursor(HWND hwnd, HCURSOR hcursor, BOOL use_hcursor);
@@ -131,7 +132,7 @@ static void pointer_handle_enter(void *data, struct wl_pointer *wl_pointer,
     /* Handle the enter as a motion, to account for cases where the
      * window first appears beneath the pointer and won't get a separate
      * motion event. */
-    pointer_handle_motion_internal(sx, sy);
+    pointer_handle_motion_internal(sx, sy, TRUE);
 }
 
 static void pointer_handle_leave(void *data, struct wl_pointer *wl_pointer,
@@ -269,6 +270,7 @@ static void relative_pointer_v1_relative_motion(void *private,
                                      wl_fixed_to_double(dx),
                                      wl_fixed_to_double(dy),
                                      (int *)&screen.x, (int *)&screen.y);
+    data->last_mouse_move_was_relative = TRUE;
 
     wayland_win_data_release(data);
 
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 5c5ce5b..e634666 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -325,6 +325,7 @@ struct wayland_win_data
     struct window_rects rects;
     BOOL is_fullscreen;
     BOOL managed;
+    BOOL last_mouse_move_was_relative;
 };
 
 struct wayland_win_data *wayland_win_data_get(HWND hwnd);

