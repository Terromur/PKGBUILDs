# Maintainer: Vasiliy Stelmachenok <ventureo@yandex.ru>
## Arch Linux maintainer:
# Maintainer: Jan Alexander Steffens (heftig) <heftig@archlinux.org>

: ${_configure:=}
: ${_skip_modprobed_db:=}

pkgbase=linux-pure
pkgname=(linux-pure linux-pure-headers)
pkgver=6.12.7.pure
pkgrel=1
pkgdesc='My personal kernel build as a testing ground'
url='https://github.com/archlinux/linux'
arch=(x86_64)
license=(GPL-2.0-only)
makedepends=(
  bc
  cpio
  gettext
  libelf
  pahole
  perl
  python
  tar
  xz
)
options=(!strip !debug)
_srcname=linux-${pkgver%.*}
source=(
  https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz
  config
  modules.db
  0001-rt.patch
  0001-ntsync.patch
  0002-bore.patch
  0003-Restore-CONFIG_OPTIMIZE_FOR_PERFORMANCE_O3.patch
  0004-cpu-select.patch
  0005-Add-sysctl-and-CONFIG-to-disallow-unprivileged-CLONE_NEWUSER.patch
  0006-Default-to-maximum-amount-of-ASLR-bits.patch
  0007-skip-simpledrm-if-nvidia-drm.modeset=1-is-set.patch
  0200-clearlinux-extras.patch
  valve-gamescope-framerate-control-fixups.patch
  dkms-clang.patch
  polly.patch
  thinlto.patch
)
sha256sums=(
  'f785fb648a0e0b66a943bb3228a4b6ed62c90b985cd1ebf69da5d38e589da0cf'
  'a6a234cd982d21f0d7daa3ba921293e450abd87ff5d7474d4a153b3f34cfabc5'
  'd148fc94586e0924e98b4976bd86a2e8b7d885ba862156ad9738a448f50c78b0'
  'cd013d8f1f0326e6ba85c7b395257e18aedeac6343868fd5534465761b5a6545'
  'a41817aebcc85b378809c223bb11a705cb03251e6e9f9b5027f8506787a417d2'
  '2ac85c63b1c7279e3a3af130e7e4f2aea164df179b76f1d8270c00f064efb1c6'
  '48e12a587e3a93e73ca2bba9f3b418d70c0a56592581d2705384a07243c70d61'
  '0460b771badb209dd4a2db6310083031707d41c5ce682dabed63b5077e2768f9'
  '97509ff14bc98e8c8a93ae7412717bd0637b64b7fe4c3fa782e857a9a75c692f'
  '601705db7a8ce1f3a9183d4273ee9c5cef88685a6a63e47b3127dbfafd7e0e97'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd "$_srcname"

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    src="${src%.zst}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."

  cp ../config .config

  # Basic config tuning
  scripts/config -d HZ_300 -e HZ_1000 --set-val HZ 1000
  scripts/config -e SCHED_BORE --set-val MIN_BASE_SLICE_NS 2000000
  scripts/config -e NTSYNC
  scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE -e CC_OPTIMIZE_FOR_PERFORMANCE_O3

    # Отключение ненужных драйверов и функций
  scripts/config -d DRM_MGAG200_DISABLE_WRITECOMBINE
  scripts/config -d GPIO_BT8XX
  scripts/config -d INTEL_TDX_HOST
  scripts/config -d SND_SE6X
  scripts/config -d MEMORY_HOTPLUG

  # Отключение кластерного шедулера на x86
    scripts/config -d SCHED_CLUSTER
    
  # Отключение ненужной файловой системы
  scripts/config -d MSDOS_FS

  # Включение оптимизации HugeTLB Vmemmap по умолчанию
  scripts/config -e HUGETLB_PAGE_OPTIMIZE_VMEMMAP_DEFAULT_ON

  # Отключение аппаратных мониторов
  scripts/config -d IGB_HWMON
  scripts/config -d IXGBE_HWMON
  scripts/config -d TIGON3_HWMON
  scripts/config -d SCSI_UFS_HWMON
  scripts/config -d SENSORS_IIO_HWMON

  # Отключение трассировщиков
  scripts/config -d ATH5K_TRACER
  scripts/config -d DM_UEVENT
  scripts/config -d FUNCTION_PROFILER
  scripts/config -d FTRACE_RECORD_RECURSION
  scripts/config -d FTRACE_SORT_STARTUP_TEST
  scripts/config -d FTRACE_VALIDATE_RCU_IS_WATCHING
  scripts/config -d HWLAT_TRACER
  scripts/config -d IRQSOFF_TRACER
  scripts/config -d KPROBE_EVENTS_ON_NOTRACE
  scripts/config -d LOCK_EVENT_COUNTS
  scripts/config -d MMIOTRACE
  scripts/config -d MMIOTRACE_TEST
  scripts/config -d OSNOISE_TRACER
  scripts/config -d PM_DEVFREQ_EVENT
  scripts/config -d PREEMPT_TRACER
  scripts/config -d PSTORE_FTRACE
  scripts/config -d SCHED_TRACER
  scripts/config -d TIMERLAT_TRACER
  scripts/config -d SYNTH_EVENTS
  scripts/config -d USER_EVENTS
  scripts/config -d HIST_TRIGGERS

  # Отключение отладочных функций
  scripts/config -d SLUB_DEBUG
  scripts/config -d SLUB_DEBUG_ON
  scripts/config -d PAGE_POISONING
  scripts/config -d GDB_SCRIPTS
  scripts/config -d ACPI_DEBUG
  scripts/config -d PM_DEBUG
  scripts/config -d PM_ADVANCED_DEBUG
  scripts/config -d PM_SLEEP_DEBUG
  scripts/config -d PM_TRACE_RTC
  scripts/config -d LATENCYTOP
  scripts/config -d LEDS_TRIGGER_CPU
  scripts/config -d LEDS_TRIGGER_GPIO
  scripts/config -d MEMTEST
  scripts/config -d PCIEAER_INJECT
  scripts/config -d PCIE_ECRC
  scripts/config -d GENERIC_IRQ_DEBUGFS
  scripts/config -d GENERIC_IRQ_INJECTION
  scripts/config -d FUNCTION_ERROR_INJECTION
  scripts/config -d PRINTK_INDEX
  scripts/config -d SOFTLOCKUP_DETECTOR_INTR_STORM
  scripts/config -d GENERIC_IRQ_STAT_SNAPSHOT
  scripts/config -d 6LOWPAN_DEBUGFS
  scripts/config -d AF_RXRPC_DEBUG
  scripts/config -d AFS_DEBUG
  scripts/config -d AFS_DEBUG_CURSOR
  scripts/config -d ATA_VERBOSE_ERROR
  scripts/config -d ATH10K_DEBUG
  scripts/config -d ATH10K_DEBUGFS
  scripts/config -d ATH12K_DEBUG
  scripts/config -d ATH5K_DEBUG
  scripts/config -d ATH6KL_DEBUG
  scripts/config -d ATH9K_HTC_DEBUGFS
  scripts/config -d ATM_ENI_DEBUG
  scripts/config -d ATM_IA_DEBUG
  scripts/config -d ATM_IDT77252_DEBUG
  scripts/config -d BCACHE_DEBUG
  scripts/config -d BCACHEFS_DEBUG
  scripts/config -d BEFS_DEBUG
  scripts/config -d BLK_DEBUG_FS
  scripts/config -d BT_DEBUGFS
  scripts/config -d CEPH_LIB_PRETTYDEBUG
  scripts/config -d CFG80211_DEBUGFS
  scripts/config -d CIFS_DEBUG
  scripts/config -d CIFS_DEBUG2
  scripts/config -d CIFS_DEBUG_DUMP_KEYS
  scripts/config -d CMA_DEBUGFS
  scripts/config -d CROS_EC_DEBUGFS
  scripts/config -d CRYPTO_DEV_AMLOGIC_GXL_DEBUG
  scripts/config -d CRYPTO_DEV_CCP_DEBUGFS
  scripts/config -d DEBUG_BUGVERBOSE
  scripts/config -d DEBUG_MEMORY_INIT
  scripts/config -d DEBUG_RODATA_TEST
  scripts/config -d DEBUG_RSEQ
  scripts/config -d DEBUG_SHIRQ
  scripts/config -d DEBUG_WX
  scripts/config -d DLM_DEBUG
  scripts/config -d DM_DEBUG_BLOCK_MANAGER_LOCKING
  scripts/config -d DM_DEBUG_BLOCK_STACK_TRACING
  scripts/config -d DRM_DEBUG_DP_MST_TOPOLOGY_REFS
  scripts/config -d DRM_DEBUG_MODESET_LOCK
  scripts/config -d DRM_DISPLAY_DP_TUNNEL_STATE_DEBUG
  scripts/config -d DRM_I915_DEBUG
  scripts/config -d DRM_I915_DEBUG_GUC
  scripts/config -d DRM_I915_DEBUG_MMIO
  scripts/config -d DRM_I915_DEBUG_VBLANK_EVADE
  scripts/config -d DRM_I915_DEBUG_WAKEREF
  scripts/config -d DRM_I915_SW_FENCE_DEBUG_OBJECTS
  scripts/config -d DRM_XE_DEBUG
  scripts/config -d DRM_XE_DEBUG_MEM
  scripts/config -d DRM_XE_DEBUG_SRIOV
  scripts/config -d DRM_XE_DEBUG_VM
  scripts/config -d DVB_USB_DEBUG
  scripts/config -d EARLY_PRINTK_DBGP
  scripts/config -d EARLY_PRINTK_USB_XDBC
  scripts/config -d EXT4_DEBUG
  scripts/config -d HIST_TRIGGERS_DEBUG
  scripts/config -d INFINIBAND_MTHCA_DEBUG
  scripts/config -d IWLEGACY_DEBUG
  scripts/config -d IWLWIFI_DEBUG
  scripts/config -d JFS_DEBUG
  scripts/config -d LDM_DEBUG
  scripts/config -d LIBERTAS_THINFIRM_DEBUG
  scripts/config -d NETFS_DEBUG
  scripts/config -d NFS_DEBUG
  scripts/config -d NVME_TARGET_DEBUGFS
  scripts/config -d NVME_VERBOSE_ERRORS
  scripts/config -d OCFS2_DEBUG_FS
  scripts/config -d PNP_DEBUG_MESSAGES
  scripts/config -d QUOTA_DEBUG
  scripts/config -d RTLWIFI_DEBUG
  scripts/config -d RTW88_DEBUG
  scripts/config -d RTW88_DEBUGFS
  scripts/config -d RTW89_DEBUGFS
  scripts/config -d RTW89_DEBUGMSG
  scripts/config -d SHRINKER_DEBUG
  scripts/config -d SMS_SIANO_DEBUGFS
  scripts/config -d SND_SOC_SOF_DEBUG
  scripts/config -d SUNRPC_DEBUG
  scripts/config -d UFS_DEBUG
  scripts/config -d USB_DWC2_DEBUG
  scripts/config -d VFIO_DEBUGFS
  scripts/config -d VIRTIO_DEBUG
  scripts/config -d VISL_DEBUGFS
  scripts/config -d WCN36XX_DEBUGFS
  scripts/config -d WWAN_DEBUGFS
  scripts/config -d XEN_DEBUG_FS

  # Применение настроек Clear Linux для x86
  scripts/config -d IOMMU_DEFAULT_DMA_LAZY -e IOMMU_DEFAULT_PASSTHROUGH
  scripts/config -d ACPI_TABLE_UPGRADE
  scripts/config -d ACPI_PCI_SLOT
  scripts/config -d ACPI_EXTLOG
  scripts/config -d BALLOON_COMPACTION
  scripts/config -d CMA
  scripts/config -d DAMON
  scripts/config -d HWPOISON_INJECT
  scripts/config -d MEM_SOFT_DIRTY -d IDLE_PAGE_TRACKING
  scripts/config -d PARAVIRT_TIME_ACCOUNTING
  scripts/config -e PSI_DEFAULT_DISABLED
  scripts/config -d READ_ONLY_THP_FOR_FS
  scripts/config -e DEBUG_FORCE_FUNCTION_ALIGN_64B
  scripts/config -d SECURITY_IPE
  scripts/config -d SND_UTIMER
  scripts/config -d WATCH_QUEUE
  scripts/config -d WATCHDOG
  scripts/config -d PCIEASPM_DEFAULT -e PCIEASPM_PERFORMANCE
  scripts/config -d WQ_POWER_EFFICIENT_DEFAULT
  scripts/config -d X86_BOOTPARAM_MEMORY_CORRUPTION_CHECK
  scripts/config -d X86_CPA_STATISTICS
  scripts/config -d X86_DECODER_SELFTEST
  scripts/config -d X86_5LEVEL
  scripts/config -d STACKPROTECTOR_STRONG -e STACKPROTECTOR
  scripts/config -d LEGACY_VSYSCALL_XONLY -e LEGACY_VSYSCALL_NONE
  scripts/config -d UID16 -d X86_16BIT -d MODIFY_LDT_SYSCALL
  scripts/config -d SYSFS_SYSCALL
  scripts/config -e STRICT_SIGALTSTACK_SIZE
  scripts/config -d KEXEC -d KEXEC_FILE -d CRASH_DUMP
  scripts/config -d KFENCE
  scripts/config -d INIT_STACK_ALL_ZERO -e INIT_STACK_NONE
  scripts/config -d UCLAMP_TASK
  scripts/config -d CGROUP_HUGETLB
  scripts/config -d CGROUP_NET_PRIO
  scripts/config -d CGROUP_PERF
  scripts/config -d CGROUP_RDMA
  scripts/config -d BLK_CGROUP_IOLATENCY
  scripts/config -d BLK_CGROUP_IOCOST
  scripts/config -d BLK_CGROUP_IOPRIO
  scripts/config -d NETFILTER_XT_MATCH_CGROUP
  scripts/config -d CPUMASK_OFFSTACK -d MAXSMP
  scripts/config -d ZSWAP_DEFAULT_ON -d ZSWAP_SHRINKER_DEFAULT_ON
  scripts/config -d ZSWAP_ZPOOL_DEFAULT_ZSMALLOC -d ZSMALLOC_STAT

  # Отключение профилирования gcov
  scripts/config -d GCOV_KERNEL
  # Отключение профилирования gcov всего ядра
  scripts/config -d GCOV_PROFILE_ALL

  # Отключение NUMA и связанных параметров
  scripts/config -d NUMA \
    -d AMD_NUMA \
    -d X86_64_ACPI_NUMA \
    -d NODES_SPAN_OTHER_NODES \
    -d NUMA_EMU \
    -d USE_PERCPU_NUMA_NODE_ID \
    -d ACPI_NUMA \
    -d ARCH_SUPPORTS_NUMA_BALANCING \
    -d NODES_SHIFT \
    -u NODES_SHIFT \
    -d NEED_MULTIPLE_NODES \
    -d NUMA_BALANCING \
    -d NUMA_BALANCING_DEFAULT_ENABLED  

  if grep -q AMD /proc/cpuinfo; then
    scripts/config -e MNATIVE_AMD
  else
    scripts/config -e MNATIVE_INTEL
  fi

  [[ -z "$_skip_modprobed_db" ]] && \
    make LSMOD="${srcdir}/modules.db" localmodconfig

  make prepare
  yes "" | make config >/dev/null
  diff -u ../config .config || :

  [[ -n "$_configure" ]] && make nconfig

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"

}

build() {
  cd "$_srcname"
  make all
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
}

package_linux-pure() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(
    coreutils
    initramfs
    kmod
  )
  optdepends=(
    'linux-firmware: firmware images needed for some devices'
    'scx-scheds: to use sched-ext schedulers'
    'wireless-regdb: to set the correct wireless channels of your country'
  )
  provides=(
    KSMBD-MODULE
    VIRTUALBOX-GUEST-MODULES
    WIREGUARD-MODULE
  )
  replaces=(
    virtualbox-guest-modules-arch
    wireguard-arch
  )

  cd $_srcname
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm "$modulesdir"/build
}

package_linux-pure-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd "$_srcname"
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts
  ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

# vim:set ts=8 sts=2 sw=2 et:
