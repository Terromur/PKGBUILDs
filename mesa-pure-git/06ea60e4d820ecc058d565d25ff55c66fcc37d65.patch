From 06ea60e4d820ecc058d565d25ff55c66fcc37d65 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Sun, 13 Oct 2024 15:25:38 +0200
Subject: [PATCH] zink: Implement GL_MESA_placed_allocation prototype
 extension.

---
 src/gallium/drivers/zink/zink_bo.c           | 48 +++++++++++++++++++-
 src/gallium/drivers/zink/zink_device_info.py |  5 ++
 src/gallium/drivers/zink/zink_screen.c       | 15 ++++++
 src/gallium/drivers/zink/zink_types.h        |  6 +++
 4 files changed, 73 insertions(+), 1 deletion(-)

diff --git a/src/gallium/drivers/zink/zink_bo.c b/src/gallium/drivers/zink/zink_bo.c
index 26e65a68ea24d..73682d2b3495b 100644
--- a/src/gallium/drivers/zink/zink_bo.c
+++ b/src/gallium/drivers/zink/zink_bo.c
@@ -695,6 +695,7 @@ zink_bo_map(struct zink_screen *screen, struct zink_bo *bo)
    void *cpu = NULL;
    uint64_t offset = 0;
    struct zink_bo *real;
+   void *placed_token;
 
    if (bo->mem) {
       real = bo;
@@ -710,12 +711,42 @@ zink_bo_map(struct zink_screen *screen, struct zink_bo *bo)
        * be atomic thanks to the lock. */
       cpu = real->u.real.cpu_ptr;
       if (!cpu) {
+         if ((cpu = u_placed_map(&screen->placed_callbacks, real->base.base.size, &placed_token))) {
+            const VkMemoryMapPlacedInfoEXT placed_info = {
+               .sType = VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT,
+               .pNext = NULL,
+               .pPlacedAddress = cpu,
+            };
+
+            const VkMemoryMapInfoKHR info =
+            {
+               .sType = VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR,
+               .pNext = &placed_info,
+               .flags = VK_MEMORY_MAP_PLACED_BIT_EXT,
+               .memory = real->mem,
+               .offset = 0,
+               .size = real->base.base.size,
+            };
+
+            VkResult result = VKSCR(MapMemory2KHR)(screen->dev, &info, &cpu);
+            if (result == VK_SUCCESS) {
+               real->u.real.placed_addr = placed_info.pPlacedAddress;
+               real->u.real.placed_size = real->base.base.size;
+               real->u.real.placed_token = placed_token;
+            } else {
+               mesa_loge("ZINK: placed vkMapMemory failed (%s)", vk_Result_to_str(result));
+               cpu = NULL;
+               u_placed_unmap(&screen->placed_callbacks, placed_info.pPlacedAddress, real->base.base.size, placed_token);
+            }
+         }
+
          VkResult result = VKSCR(MapMemory)(screen->dev, real->mem, 0, real->base.base.size, 0, &cpu);
          if (result != VK_SUCCESS) {
             mesa_loge("ZINK: vkMapMemory failed (%s)", vk_Result_to_str(result));
             simple_mtx_unlock(&real->lock);
             return NULL;
          }
+
          if (unlikely(zink_debug & ZINK_DEBUG_MAP)) {
             p_atomic_add(&screen->mapped_vram, real->base.base.size);
             mesa_loge("NEW MAP(%"PRIu64") TOTAL(%"PRIu64")", real->base.base.size, screen->mapped_vram);
@@ -742,7 +773,22 @@ zink_bo_unmap(struct zink_screen *screen, struct zink_bo *bo)
          p_atomic_add(&screen->mapped_vram, -real->base.base.size);
          mesa_loge("UNMAP(%"PRIu64") TOTAL(%"PRIu64")", real->base.base.size, screen->mapped_vram);
       }
-      VKSCR(UnmapMemory)(screen->dev, real->mem);
+      if (real->u.real.placed_addr)
+      {
+         const VkMemoryUnmapInfoKHR info =
+         {
+            .sType = VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR,
+            .memory = real->mem,
+            .flags = VK_MEMORY_UNMAP_RESERVE_BIT_EXT,
+         };
+
+         VKSCR(UnmapMemory2KHR)(screen->dev, &info);
+
+         u_placed_unmap(&screen->placed_callbacks, real->u.real.placed_addr, real->u.real.placed_size, real->u.real.placed_token);
+         real->u.real.placed_addr = NULL;
+      } else {
+         VKSCR(UnmapMemory)(screen->dev, real->mem);
+      }
    }
 }
 
diff --git a/src/gallium/drivers/zink/zink_device_info.py b/src/gallium/drivers/zink/zink_device_info.py
index a25dc3f27e6c1..c626785493b2b 100644
--- a/src/gallium/drivers/zink/zink_device_info.py
+++ b/src/gallium/drivers/zink/zink_device_info.py
@@ -327,6 +327,11 @@ EXTENSIONS = [
     Extension("VK_KHR_shader_float_controls",
               alias="float_controls"),
     Extension("VK_KHR_format_feature_flags2"),
+    Extension("VK_KHR_map_memory2"),
+    Extension("VK_EXT_map_memory_placed",
+              alias="map_placed",
+              features=True,
+              conditions=["$feats.memoryMapPlaced", "$feats.memoryUnmapReserve"]),
 ]
 
 # constructor: Versions(device_version(major, minor, patch), struct_version(major, minor))
diff --git a/src/gallium/drivers/zink/zink_screen.c b/src/gallium/drivers/zink/zink_screen.c
index 77e1c2eebd469..ccb5aa7862691 100644
--- a/src/gallium/drivers/zink/zink_screen.c
+++ b/src/gallium/drivers/zink/zink_screen.c
@@ -1054,6 +1054,9 @@ zink_get_param(struct pipe_screen *pscreen, enum pipe_cap param)
    case PIPE_CAP_STRING_MARKER:
       return screen->instance_info.have_EXT_debug_utils;
 
+   case PIPE_CAP_PLACED_ALLOCATION:
+      return screen->info.have_EXT_map_memory_placed;
+
    default:
       return u_pipe_screen_get_param_defaults(pscreen, param);
    }
@@ -3280,6 +3283,17 @@ zink_screen_get_fd(struct pipe_screen *pscreen)
    return screen->drm_fd;
 }
 
+static void
+zink_set_placed_callbacks(struct pipe_screen *pscreen, const struct util_placed_callbacks *cbs)
+{
+   struct zink_screen *screen = zink_screen(pscreen);
+
+   if (cbs)
+      screen->placed_callbacks = *cbs;
+   else
+      memset(&screen->placed_callbacks, 0, sizeof(screen->placed_callbacks));
+}
+
 static struct zink_screen *
 zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev_major, int64_t dev_minor, uint64_t adapter_luid)
 {
@@ -3531,6 +3545,7 @@ zink_internal_create_screen(const struct pipe_screen_config *config, int64_t dev
    screen->base.is_compute_copy_faster = zink_is_compute_copy_faster;
    screen->base.is_format_supported = zink_is_format_supported;
    screen->base.driver_thread_add_job = zink_driver_thread_add_job;
+   screen->base.set_placed_callbacks = zink_set_placed_callbacks;
    if (screen->info.have_EXT_image_drm_format_modifier && screen->info.have_EXT_external_memory_dma_buf) {
       screen->base.query_dmabuf_modifiers = zink_query_dmabuf_modifiers;
       screen->base.is_dmabuf_modifier_supported = zink_is_dmabuf_modifier_supported;
diff --git a/src/gallium/drivers/zink/zink_types.h b/src/gallium/drivers/zink/zink_types.h
index 8df84781729d0..2829f13771fcb 100644
--- a/src/gallium/drivers/zink/zink_types.h
+++ b/src/gallium/drivers/zink/zink_types.h
@@ -690,6 +690,10 @@ struct zink_bo {
           * it can only transition from false to true. Protected by lock.
           */
          bool is_shared;
+
+         void *placed_token;
+         void *placed_addr;
+         unsigned int placed_size;
       } real;
       struct {
          struct pb_slab_entry entry;
@@ -1557,6 +1561,8 @@ struct zink_screen {
       unsigned z16_unscaled_bias;
       unsigned z24_unscaled_bias;
    } driver_workarounds;
+
+   struct util_placed_callbacks placed_callbacks;
 };
 
 static inline struct zink_screen *
-- 
GitLab

